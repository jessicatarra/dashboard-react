{"version":3,"sources":["header.js","card.js","top-card-list.js","switch.js","card-small.js","overview.js","App.js","serviceWorker.js","index.js"],"names":["Header","children","className","Card","username","followers","todayFollowers","icon","color","cardClass","src","alt","href","target","cardListData","id","TopCardList","map","cardData","key","Switch","ref","useRef","onChange","current","checked","document","body","classList","remove","add","type","htmlFor","CardSmall","growth","pageViews","cardSmallList","Overview","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d915093.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nexport default function Header({ children }) {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"header-grid\">\r\n          <div>\r\n            <h1>Social Media Dashboard</h1>\r\n            <p className=\"header-total\">Total Followers: 23,004</p>\r\n          </div>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Card({\r\n  username,\r\n  followers,\r\n  todayFollowers,\r\n  icon,\r\n  color,\r\n}) {\r\n  const cardClass = `card ${color}`;\r\n  return (\r\n    <articles className={cardClass}>\r\n      <p className=\"card-title\">\r\n        <img src={icon} alt=\"\" />\r\n        <a href=\"https://www.facebook.com/jessictarra\" target=\"_blank\">\r\n          {username}\r\n        </a>\r\n      </p>\r\n      <p className=\"card-followers\">\r\n        <span className=\"card-followers-number\">{followers}</span>\r\n        <span className=\"card-followers-title\">Followers</span>\r\n      </p>\r\n      <p className=\"card-today\">\r\n        <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n        {todayFollowers} Today\r\n      </p>\r\n    </articles>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./top-card-list.css\";\r\nimport Card from \"./card\";\r\n\r\nconst cardListData = [\r\n  {\r\n    username: \"@jessicatarra\",\r\n    id: 1,\r\n    followers: 1987,\r\n    todayFollowers: 12,\r\n    icon: \"../images/icon-facebook.svg\",\r\n    color: \"facebook\",\r\n  },\r\n  {\r\n    username: \"@jessicatarra\",\r\n    id: 2,\r\n    followers: 1044,\r\n    todayFollowers: 12,\r\n    icon: \"../images/icon-twitter.svg\",\r\n    color: \"twitter\",\r\n  },\r\n  {\r\n    username: \"@jessicatarra\",\r\n    id: 3,\r\n    followers: \"11k\",\r\n    todayFollowers: 12,\r\n    icon: \"../images/icon-instagram.svg\",\r\n    color: \"instagram\",\r\n  },\r\n  {\r\n    username: \"@jessicatarra\",\r\n    id: 4,\r\n    followers: 8239,\r\n    todayFollowers: 12,\r\n    icon: \"../images/icon-youtube.svg\",\r\n    color: \"youtube\",\r\n  },\r\n];\r\n\r\nexport default function TopCardList() {\r\n  return (\r\n    <section className=\"top-cards\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"grid\">\r\n          {cardListData.map((cardData) => (\r\n            <Card key={cardData.id} {...cardData} />\r\n          ))}\r\n\r\n          {/* <articles className=\"card twitter\">\r\n            <p className=\"card-title\">\r\n              <img src=\"../images/icon-twitter.svg\" alt=\"\" />\r\n              <a href=\"https://www.twitter.com/jessicatarra\" target=\"_blank\">\r\n                @jessicatarra\r\n              </a>\r\n            </p>\r\n            <p className=\"card-followers\">\r\n              <span className=\"card-followers-number\">1044</span>\r\n              <span className=\"card-followers-title\">Followers</span>\r\n            </p>\r\n            <p className=\"card-today\">\r\n              <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n              12 Today\r\n            </p>\r\n          </articles>\r\n          <articles className=\"card instagram\">\r\n            <p className=\"card-title\">\r\n              <img src=\"../images/icon-instagram.svg\" alt=\"\" />\r\n              <a href=\"https://www.instagram.com/jessicatarra\" target=\"_blank\">\r\n                @jessicatarra\r\n              </a>\r\n            </p>\r\n            <p className=\"card-followers\">\r\n              <span className=\"card-followers-number\">11k</span>\r\n              <span className=\"card-followers-title\">Followers</span>\r\n            </p>\r\n            <p className=\"card-today\">\r\n              <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n              12 Today\r\n            </p>\r\n          </articles>\r\n          <articles className=\"card youtube\">\r\n            <p className=\"card-title\">\r\n              <img src=\"../images/icon-youtube.svg\" alt=\"\" />\r\n              <a href=\"https://www.youtube.com/jessicatarra\" target=\"_blank\">\r\n                @jessicatarra\r\n              </a>\r\n            </p>\r\n            <p className=\"card-followers\">\r\n              <span className=\"card-followers-number\">8239</span>\r\n              <span className=\"card-followers-title\">Followers</span>\r\n            </p>\r\n            <p className=\"card-today\">\r\n              <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n              12 Today\r\n            </p>\r\n          </articles>\r\n           */}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport \"./switch.css\";\r\n\r\nexport default function Switch() {\r\n  const ref = useRef(null);\r\n  function handleChange() {\r\n    //console.log(ref.current.checked);\r\n    if (ref.current.checked) {\r\n      document.body.classList.remove(\"is-light-mode\");\r\n      document.body.classList.add(\"is-dark-mode\");\r\n    } else {\r\n      document.body.classList.remove(\"is-dark-mode\");\r\n      document.body.classList.add(\"is-light-mode\");\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"dark-mode\">\r\n      <p className=\"dark-mode-title\">Dark Mode</p>\r\n      <input\r\n        ref={ref}\r\n        onChange={handleChange}\r\n        type=\"checkbox\"\r\n        id=\"checkbox\"\r\n        className=\"checkbox\"\r\n      />\r\n      <label className=\"switch\" htmlFor=\"checkbox\"></label>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function CardSmall({ growth, pageViews, icon }) {\r\n  return (\r\n    <div className=\"card-small\">\r\n      <p className=\"card-small-views\">Page Views</p>\r\n      <p className=\"card-small-icon\">\r\n        <img src={icon} alt=\"\" />\r\n      </p>\r\n      <p className=\"card-small-number\">{pageViews}</p>\r\n      <p className=\"card-small-percentage\">\r\n        <span>\r\n          <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n          {growth}%\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./overview.css\";\r\nimport CardSmall from \"./card-small\";\r\n\r\nconst cardSmallList = [\r\n  {\r\n    icon: \"./images/icon-facebook.svg\",\r\n    pageViews: \"87\",\r\n    growth: 3,\r\n    key: 1,\r\n  },\r\n  {\r\n    icon: \"./images/icon-twitter.svg\",\r\n    pageViews: \"52\",\r\n    growth: 2257,\r\n    key: 2,\r\n  },\r\n  {\r\n    icon: \"./images/icon-instagram.svg\",\r\n    pageViews: \"5462\",\r\n    growth: 1375,\r\n    key: 3,\r\n  },\r\n  {\r\n    icon: \"./images/icon-youtube.svg\",\r\n    pageViews: \"117\",\r\n    growth: 303,\r\n    key: 4,\r\n  },\r\n];\r\n\r\nexport default function Overview() {\r\n  return (\r\n    <section className=\"overview\">\r\n      <div className=\"wrapper\">\r\n        <h2>Overview - Today</h2>\r\n        <div className=\"grid\">\r\n          {cardSmallList.map(({ icon, pageViews, growth, key }) => (\r\n            <CardSmall\r\n              icon={icon}\r\n              key={key}\r\n              pageViews={pageViews}\r\n              growth={growth}\r\n            />\r\n          ))}\r\n\r\n          {/* <div className=\"card-small\">\r\n            <p className=\"card-small-views\">Likes</p>\r\n            <p className=\"card-small-icon\">\r\n              <img src=\"./images/icon-facebook.svg\" alt=\"\" />\r\n            </p>\r\n            <p className=\"card-small-number\">52</p>\r\n            <p className=\"card-small-percentage is-red\">\r\n              <span>\r\n                <img src=\"./images/icon-down.svg\" alt=\"\" />\r\n                2%\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"card-small\">\r\n            <p className=\"card-small-views\">Likes</p>\r\n            <p className=\"card-small-icon\">\r\n              <img src=\"./images/icon-facebook.svg\" alt=\"\" />\r\n            </p>\r\n            <p className=\"card-small-number\">5462</p>\r\n            <p className=\"card-small-percentage\">\r\n              <span>\r\n                <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n                2257%\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"card-small\">\r\n            <p className=\"card-small-views\">Profile Views</p>\r\n            <p className=\"card-small-icon\">\r\n              <img src=\"./images/icon-instagram.svg\" alt=\"\" />\r\n            </p>\r\n            <p className=\"card-small-number\">52k</p>\r\n            <p className=\"card-small-percentage\">\r\n              <span>\r\n                <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n                1375%\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"card-small\">\r\n            <p className=\"card-small-views\">Retweets</p>\r\n            <p className=\"card-small-icon\">\r\n              <img src=\"./images/icon-twitter.svg\" alt=\"\" />\r\n            </p>\r\n            <p className=\"card-small-number\">117</p>\r\n            <p className=\"card-small-percentage\">\r\n              <span>\r\n                <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n                303%\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"card-small\">\r\n            <p className=\"card-small-views\">Likes</p>\r\n            <p className=\"card-small-icon\">\r\n              <img src=\"./images/icon-twitter.svg\" alt=\"\" />\r\n            </p>\r\n            <p className=\"card-small-number\">507</p>\r\n            <p className=\"card-small-percentage\">\r\n              <span>\r\n                <img src=\"./images/icon-up.svg\" alt=\"\" />\r\n                553%\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"card-small\">\r\n            <p className=\"card-small-views\">Likes</p>\r\n            <p className=\"card-small-icon\">\r\n              <img src=\"./images/icon-youtube.svg\" alt=\"\" />\r\n            </p>\r\n            <p className=\"card-small-number\">107</p>\r\n            <p className=\"card-small-percentage is-red\">\r\n              <span>\r\n                <img src=\"./images/icon-down.svg\" alt=\"\" />\r\n                19%\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"card-small\">\r\n            <p className=\"card-small-views\">Total Views</p>\r\n            <p className=\"card-small-icon\">\r\n              <img src=\"./images/icon-youtube.svg\" alt=\"\" />\r\n            </p>\r\n            <p className=\"card-small-number\">1407</p>\r\n            <p className=\"card-small-percentage is-red\">\r\n              <span>\r\n                <img src=\"./images/icon-down.svg\" alt=\"\" />\r\n                12%\r\n              </span>\r\n            </p>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./globals.css\";\nimport Header from \"./header\";\nimport TopCardList from \"./top-card-list\";\nimport Switch from \"./switch\";\nimport Overview from \"./overview\";\n\nfunction App() {\n  return (\n    <>\n      <Header>\n        <Switch />\n      </Header>\n      <TopCardList />\n      <Overview />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}